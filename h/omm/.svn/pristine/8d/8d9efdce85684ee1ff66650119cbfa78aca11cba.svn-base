import traceback
from subprocess import Popen, PIPE
import ConfigParser
import datetime
from os import path as ospath

ConfigFile = "config.ini"


def get_config_params():
    """
    This function is used for getting the dictionary of
    config parameters available in config.ini

    @return my_config_parser_dict : (Dictionary) Config dictionary contains all
                                configuration parameters
    """
    my_config_parser_dict = ""
    try:
        config = ConfigParser.RawConfigParser()
        config.read(ConfigFile)
        my_config_parser_dict = {s: dict(config.items(s)) for s in \
                                 config.sections()}
    except:
            traceback.print_exc()
    return my_config_parser_dict


def step(num):
    """
    This function is used for printing step in std out

    @param  num : (String) Step number/Step heading to be printed
    """
    try:
        print "#", "*" * 100
        print " " * 46, " STEP %s " % str(num)
        print "#", "*" * 100
    except:
        traceback.print_exc()


def title(titlestr):
    """
    This function is used for printing title in formatted way in std out

    @param  titlestr : (String) Title string to be printed in std out
    """
    try:
        print "#", "*" * 100
        print " " * 10, titlestr
        print "#", "*" * 100
    except:
        traceback.print_exc()


def pathJoin(a, *p):
    """
    This function is used for joining two or more folder to form the path

    @param  a : (String) base path
    @param  p : (String) one or more path which has to be appended
    """
    try:
        return ospath.join(a, *p)
    except:
        traceback.print_exc()


def runCommand(cmd, inparam=None, shell=True):
    """
    This function is used to run any shell command

    @param  cmd : (String) Command to be executed
    @param  inparam : (String) in parameters if any
    @param  shell : (String) True or False
    """
    result, error = "", ""
    try:
        process = Popen(cmd, shell=shell, stdin=PIPE, stdout=PIPE, stderr=PIPE)
        if (inparam != None):
            result, error = process.communicate(inparam)
        else:
            result, error = process.communicate()
    except:
        traceback.print_exc()
    return result, error


def ordered(obj):
    """
    This function is used to return dictionary or list in sorted form

    Function Owner : Nithya_V

    Date created : 2/17/2016

    @param  obj : (String) Dictionary /List which has to be sorted
    """
    try:
        if isinstance(obj, dict):
            return sorted((k, ordered(v)) for k, v in obj.items())
        if isinstance(obj, list):
            return sorted(ordered(x) for x in obj)
        else:
            return obj
    except:
        traceback.print_exc()
        return None


def uniqueID():
    """
    This function is used to generate unique ID which can be used to generate
    unique name such as connection profile name, discovery task name etc

    Function Owner : Nithya_V

    Date created : 2/17/2016

    @param  c_datetime : (String) Returns current datatime formatted as a
                            unique ID
    """
    c_datetime = ""
    try:
        c_datetime = datetime.datetime.now().strftime("%Y%m%d%I%M%S")
    except:
        traceback.print_exc()
    return c_datetime


def pathExists(filename, directory="."):
    """
    This function is used to verify if path exists

    @param  filename : (String) File name to be verified
    @param  directory : (String) current directory
    """
    try:
        fullpath = ospath.join(directory, filename)
        if (ospath.exists(fullpath)):
            return True
        else:
            return False
    except:
        traceback.print_exc()
        return False
