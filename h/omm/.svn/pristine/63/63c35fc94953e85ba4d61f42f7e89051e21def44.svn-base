""""
This module contains all the modules related to adding OME in omm
"""
import traceback
import time

from libs.product.omm.standard.ui_controls import ui_controls
from libs.product.omm.standard import global_vars
from libs.product.omm.standard import omm_lib
from libs.product.omm.omm_ome import ome_lib

'Creating objects'
ui_controls = ui_controls()

'Retrieving variables'
g = global_vars
get_obj_identifier = omm_lib.get_obj_identifier


def click_add_ome():
    """
    This function is used for clicking OME button

    Function Owner : Abdul_G_Shaik

    Date created : 06/09/2016

    @return status : (bool) status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True
    
    try:
        if g.platform == 'ios':
            'Click on add idrac button'
            time.sleep(5)
            flag1 = ui_controls.button(get_obj_identifier('add_ome_btn'))
            print 'OME button clicked on lower bar'

            'Verify page name changes to OME'
            flag2 = ui_controls.label(get_obj_identifier('add_ome_lbl'))
            time.sleep(5)
            'Click Add device button'
            if flag2:
                time.sleep(5)
                flag3 = ui_controls.button(get_obj_identifier('ome_add_btn'))
                print 'Add Icon (+) clicked'
                time.sleep(5)
        else:
            'Click on + button'
            time.sleep(5)
            flag1 = ui_controls.button(get_obj_identifier('ome_add_btn'))
            print 'plus button clicked'

        status = False if not (flag1 and flag2 and flag3) else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False
    return status, msg


def enter_ome_details(ome_ip, ome_username, ome_password):
    """
    This function is used for entering OME ip and credentials

    Function Owner : Abdul_G_Shaik

    Date created : 06/09/2016

    @@param ome_ip : (string) OME ip of system
    @param ome_userName : (string) OME user name
    @param ome_password : (string) OME password

    @return status : (bool) status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True

    try:
        'Enter OME application ip and credentials'
        flag1 = ui_controls.text_box(get_obj_identifier('addOme_ipHostname_txt'),ome_ip)
        flag2 = ui_controls.text_box(get_obj_identifier('addOme_username_txt'),ome_username)
        flag3 = ui_controls.text_box(get_obj_identifier('addOme_password_txt'),ome_password)
        ui_controls.hide_keyboard()
        time.sleep(5)

        'Click add button'
        flag4 = ui_controls.button(get_obj_identifier('addOme_add_btn'))
        print 'OME details entered successfully'
        time.sleep(15)

        status = False if not (flag1 and flag2 and flag3 and flag4) else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False
    return status, msg


def accept_ssl_certificate():
    """
    This function is used for clicking accept button on SSL Certificate window

    Function Owner : Abdul_G_Shaik

    Date created : 06/09/2016

    @return status : (bool)status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True

    try:
        'verify SSL certificate pop up window appears'
        element = ui_controls.ui_element(get_obj_identifier('addOme_certificate_win'))
        if(element is None):
            flag1 = False
        else:
            flag1 = True

        'Click accept button'
        flag2 = ui_controls.button(get_obj_identifier('addOme_certificate_accept_btn'))
        time.sleep(5)

        status = False if not (flag1 and flag2) else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False
    return status, msg


def alert_subscription():
    """
    This function is used for selecting the Alert Subscription option

    Function Owner : Abdul_G_Shaik

    Date created : 06/10/2016

    @return status : (bool)status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True

    try:
        'verify Alert Subscription pop up window appears'
        element = ui_controls.ui_element(get_obj_identifier('alert_subscription_lbl'))
        if(element is None):
            flag1 = False
        else:
            flag1 = True
        if g.platform == 'ios':
            'Click skip button'
            flag2 = ui_controls.button(get_obj_identifier('alert_subscription_skip_btn'))
            time.sleep(10)
        else:
            'Click OK button'
            flag2 = ui_controls.button(get_obj_identifier('alert_subscription_ok_btn'))
            time.sleep(10)

        status = False if not (flag1 and flag2) else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False
    return status, msg

def add_ome_app(ome_ip, ome_username, ome_password):
    """
    This function is used for adding OME application

    Function Owner : Abdul_G_Shaik

    Date created : 06/14/2016

    @@param ome_ip : (string) OME ip of system
    @param ome_userName : (string) OME user name
    @param ome_password : (string) OME password

    @return status : (bool) status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True
    try:
        'Select option to add OME'
        flag1 = click_add_ome()

        'Enter OME details'
        flag2 = enter_ome_details(ome_ip, ome_username, ome_password)

        'Accept SSL certificate and wait till OME page loads completely'
        flag3 = accept_ssl_certificate()
        
        'Alert Subscription page'
        flag4 = alert_subscription()

        status = False if not (flag1 and flag2 and flag3 and flag4) else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False
    return status, msg

def verify_ome_details(device_health, event_severity):
    """
    This function verifies OME devices health and event severity details

    Function Owner : Abdul_G_Shaik

    Date created : 06/15/2016

    @param device_health : (array) list of all device health statuses in Database
    @param event_severity : (array) list of all event severity statuses in Database

    @return status : (bool) status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True
    attribute_value = ''
    try:
        'Verify Count of Devices'
        attribute_value = ome_lib.db_get_totalcount("Device")
        flag1 = verify_total_count(attribute_value)
        
        'Verify Count of Events'
        attribute_value = ome_lib.db_get_totalcount("Event")
        flag2 = verify_total_count(attribute_value)

        'Verify devices count based upon health statuses'
        flag3 = verify_all_status_count(device_health, "Device")
        
        'Verify events count based upon severity'
        flag4 = verify_all_status_count(event_severity, "Event")

        status = False if not (flag1 and flag2 and flag3 and flag4) else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False
    return status, msg

def verify_total_count(attribute_value):
    """
    This function verifies if the object (total device count and total event count) is present on screen

    Function Owner : Abdul_G_Shaik

    Date created : 06/15/2016

    @param attribute_value : (string) Attribute value fetched from Database

    @return flag : (bool) status of execution.if successful True else False
    """
    flag = True
    try:
        'Verify Attribute value exists on screen'
        if g.platform == 'ios':
            element = g.driver.find_element_by_name(str(attribute_value)).find_element_by_name(str(attribute_value))
            print "Element with name %s is found\n" % (str(attribute_value))
            control_value = element.get_attribute('value')
            print 'Control Value:' + str(control_value)
        else:
            element = g.driver.find_element_by_name(attribute_value)
            print "Element with name %s is  found\n" % (str(attribute_value))
            control_value = element.get_attribute('text')
            print 'Control Value:' + str(control_value)

        'Check control value matches attribute value'
        if control_value.strip() == attribute_value.strip():
            print "Control value %s is same as attribute value %s \n" % (control_value, attribute_value)
            flag = True
        else:
            print "Control value %s is not same as attribute value %s \n" % (control_value, attribute_value)
            flag = False
        
    except:
        print "Element with name %s not found\n" % (str(attribute_value))
        traceback.print_exc()
        flag = False
    return flag


def verify_all_status_count(health, table_name):
    """
    This function extract the database details of various device and event statuses

    Function Owner : Abdul_G_Shaik

    Date created : 06/15/2016

    @param health : (array) list of all device health statuses and event severities in Database
    @param table_name : (string) table name of either Device or Event

    @return flag : (bool) status of execution.if successful True else False
    """
    flag = True
    try:
        'Get the Database values of all types of statuses/severities'
        list_health = health.split(",")
        for status in list_health:
            db_result = ome_lib.db_all_device_event_count(table_name, status.strip())
            print "DB RESULT is: ", db_result
            if db_result != 0:
                'Convert the database code into description'
                description = str(ome_lib.convert_code_to_description(table_name, status.strip()))
                db_result_string = str(db_result)
                
                'Form the object to search in UI'
                attribute_value = db_result_string+" "+description
                
                'Verify Attribute value exists on screen'
                element = g.driver.find_element_by_name(attribute_value)
                print "Element with name %s is found\n" % (str(attribute_value))
                
                if g.platform == 'ios':
                    control_value = element.get_attribute('value')
                    print 'Control Value:' + str(control_value)
                else:
                    control_value = element.get_attribute('text')
                    print 'Control Value:' + str(control_value)

                'Check control value matches attribute value'
                if control_value.strip() == attribute_value.strip():
                    print "Control value %s is same as attribute value %s \n" % (control_value, attribute_value)
                    flag = True
                else:
                    print "Control value %s is not same as attribute value %s \n" % (control_value, attribute_value)
                    flag = False
            else:
                'No records found in DB'
                print "No records founds with health status of %s \n" % status
    except:
        print "Could not get the values and compare in UI \n" % table_name
        traceback.print_exc()
        flag = False
    return flag

def navigate_home():
    """
    This function is used to navigate to home screen

    Function Owner : Pooja_Rundwal

    Date created : 08/06/2016

    @return status : (bool) status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True
    try:
        'Click main menu from the top bar'
        time.sleep(5)
        flag1 = ui_controls.image(get_obj_identifier('omm_topbar_menu'))

        'Select Home Option'
        if flag1:
            menu_list = ui_controls.ui_elements(get_obj_identifier('omm_menu_options'))
            for menu in menu_list:
                if menu.get_attribute('text').encode("ascii", "ignore").strip() == 'Home':
                    menu.click()
                    time.sleep(5)
                    flag2 = True
                    break
        status = False if not (flag1 and flag2) else True
    except Exception as excp:
        traceback.print_exc()
        status = False
        msg += str(excp)
    return status, msg

def delete_ome(ome_ip):
    """
    This function is used to delete OME ip

    Function Owner : Abdul_G_Shaik

    Date created : 23/06/2016

    @param ome_ip : (string) OME ip to be deleted

    @return status : (bool) status of execution.if successful True else False
    @return msg : (string) step message in case of exception
    """
    msg, status = "", True
    try:
        if g.platform == 'android':
            'Navigate to home screen'
            time.sleep(15)
            flag1 = navigate_home()

            'Select OME checkbox'
            flag2 = ui_controls.check_box(get_obj_identifier('ome_select_chk'))
            print 'OME Selected'
        else:
            time.sleep(15)
            'Select configuration button'
            flag1 = ui_controls.button(get_obj_identifier('device_configuration_btn'))

            time.sleep(10)
            ' Select Edit Connection'
            flag2 = ui_controls.button(get_obj_identifier('omeconfiguration_editconnection_txtView'))

        'Click delete button'
        flag3 = ui_controls.button(get_obj_identifier('ome_delete_btn'))
        print 'Delete button clicked'
        time.sleep(5)

        'Click yes button on popup'
        flag4 = ui_controls.button(get_obj_identifier('confirmdelete_yes_btn'))
        time.sleep(5)
        status = False if not (flag1 and flag2 and flag3 and flag4) else True
    except Exception as excp:
        traceback.print_exc()
        status = False
        msg += str(excp)
    return status, msg