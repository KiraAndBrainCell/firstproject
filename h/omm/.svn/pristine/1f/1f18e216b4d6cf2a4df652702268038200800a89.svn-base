""""
This module contains all the modules related to omm common module
"""
from time import sleep
import traceback

from libs.product.omm.standard.ui_controls import ui_controls
from libs.product.omm.standard import global_vars
from libs.product.omm.standard import omm_lib

'Creating objects'
ui_controls = ui_controls()

'Retrieving variables'
g = global_vars
get_obj_identifier = omm_lib.get_obj_identifier


def accept_license():
    """
    This function is used for accepting license on a fresh installation

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return flag : (bool)status of execution.if successful True else False

    """
    msg, status = "", True

    try:
        'Click on I agree check box'
        flag1 = ui_controls.check_box(get_obj_identifier('license_agree_chk'))

        'Click on license accept button'
        flag2 = ui_controls.button(get_obj_identifier('license_accept_btn'))

        status = False if not (flag1 and flag2) else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False

    return status, msg


def dnt_share_app():
    """
    This function is used for 'Do not share application' with developers

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return flag : (bool)status of execution.if successful True else False
    """
    msg, status = "", True
    try:
        'Click on Do not share button'
        flag = ui_controls.button(get_obj_identifier('share_dontShare_btn'))

        status = False if not flag else True
    except Exception as excp:
        traceback.print_exc()
        msg += str(excp)
        status = False
    return status, msg


def create_pwd_login():
    """
    This function is used for creating password and login

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return flag : (bool)status of execution.if successful True else False
    """
    msg, status = "", True
    try:
        'Enter the password in Create password text box'
        flag1 = ui_controls.text_box(get_obj_identifier('login_createPassword_txt'), value=g.password)

        'Checks for the keyboard presence and hides it'
        flag2 = ui_controls.hide_keyboard()

        'Enter the confirm password in Confirm Password text box'
        flag3 = ui_controls.text_box(get_obj_identifier('login_confirmPassword_txt'), value=g.password)

        'Checks for the keyboard presence and hides it'
        flag4 = ui_controls.hide_keyboard()

        'Enter password hint in Password Hint text box'
        flag5 = ui_controls.text_box(get_obj_identifier('login_passwordHint_txt'), value=g.password_hint)

        'Checks for the keyboard presence and hides it'
        flag6 = ui_controls.hide_keyboard()

        'Click on create password login button'
        flag7 = ui_controls.button(get_obj_identifier('login_createPasswordLogin_btn')) 

        status = False if not (flag1 and flag2 and flag3 and flag4 and flag5 and flag6 and flag7) else True
    except Exception as excp:
            traceback.print_exc()
            msg += str(excp)
            status = False
    return status, msg


def try_demo_continue():
    """
    This function is used for selecting try demo mode or continue

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return flag : (bool)status of execution.if successful True else False
    """
    msg, status = "", True
    try:
        sleep(10)

        'Getting y_elem as destination element'
        y_elem = ui_controls.ui_element(get_obj_identifier('common_widget_scrollview'))

        'Getting x_elem as source element'
        x_elem = ui_controls.ui_element(get_obj_identifier('demo_tryDemoMode_btn'))

        'Scroll the element from x elem to y elem'
        flag1 = ui_controls.scroll_element(x_elem, y_elem)
        sleep(3)

        'Click on Continue to OMM button'
        flag2 = ui_controls.button(get_obj_identifier('demo_continueToOmm_btn'))

        status = False if not (flag1 and flag2) else True

    except Exception as excp:
            traceback.print_exc()
            msg += str(excp)
            status = False
    return status, msg


def omm_login():
    """
    login to OMM app
    """
    msg, status = "", True
    try:
        sleep(5)
        'Enters value in password text box based on the user inputs'
        flag1 = ui_controls.text_box(get_obj_identifier('login_enterPassword_txt'), value=g.password)

        'Clicks on the login button'
        flag2 = ui_controls.button(get_obj_identifier('login_login_btn'))
        status = False if not (flag1 and flag2) else True
    except Exception as excp:
            traceback.print_exc()
            msg += str(excp)
            status = False
    return status, msg
