""""
This module contains all the modules related to omm common module
"""
import traceback
import global_vars
import os
import csv
import sys
from xml.dom import minidom
import collections
import platform

# import collections for version above 2.7 else import ordered dict
if sys.version_info < (2,7):
    import ordereddict
    ordered_dict = ordereddict
else:
    import collections
    ordered_dict = collections

from libs.product.omm.standard import util

omm_obj_repo_path = global_vars.obj_repo_path
os_type = str(platform.system())


def get_obj_identifier(object_name):
    """
    This function is used for getting object identification property based on
    platforms - android or ios

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @param  object_name : (String) Unique name of object to be identified

    @return identifier : (bool)identifier for selected property
    """
    identifier = ""
    try:
        # extracting object property based on platform - android/ios
        if global_vars.platform == 'android' :
            identifier = global_vars.object_repository[object_name]['android_object_property']
        elif global_vars.platform == 'ios' :
            identifier = global_vars.object_repository[object_name]['ios_object_property']
    except:
        traceback.print_exc()
    return identifier


def get_omm_obj_repository():
    """
    This function is used for getting omm object repository from input sheet

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return obj_dict : (Dictionary) Dictionary of All the objects with their attributes
    """
    obj_dict = {}
    try:
        # reading object_repository.csv and converting to a dictionary
        omm_obj_repo = open(omm_obj_repo_path, "rb")
        obj_rep_reader = csv.reader(omm_obj_repo)
        for row in obj_rep_reader:
            for col in row:
                if str(row[0]).strip() != 'object_name':
                    each_obj_dict = {}
                    obj_name = row[0]
                    each_obj_dict['object_description'] = row[1]
                    each_obj_dict['android_object_property'] = row[2]
                    each_obj_dict['ios_object_property'] = row[3]
                    obj_dict[obj_name] = each_obj_dict
                    break
    except:
        traceback.print_exc()
    return obj_dict


def get_tags(identifier):
    """
    This function is used for getting object property dictionary of each object

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @param  identifier : (String) Object identifier for which attributes have to be retrieved

    @return obj_property_dict : (Dictionary) Dictionary of specific object with properties
    """
    obj_property_dict = ordered_dict.OrderedDict()
    try:
        # splitting object identifier with "=" and "~||~ and getting object property dictionary
        if not(identifier.__contains__('=')):
            return None
        if identifier.__contains__('~||~'):
            idtfr_props = identifier.split('~||~')
        else:
            idtfr_props = identifier
        if isinstance(idtfr_props, list):
            for each_object in idtfr_props:
                obj_property_dict[idtfr_props.split("=")[0]] = idtfr_props.split("=")[1]
        else:
            obj_property_dict[idtfr_props.split("=")[0]] = idtfr_props.split("=")[1]
    except:
        traceback.print_exc()
    return obj_property_dict


def get_tag_identifier(identifierproperty, tag_name=None):
    """
    This function is used for getting tag and identifier of the object specified

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @param  identifierproperty : (String) identify properties with tag name
    @param  tag_name : (String) tag name of the identifier

    @return tag : (Dictionary) Dictionary of specific object with properties
    """
    tag, identifer = "", ""
    try:
        tag_property_dict = get_tags(identifierproperty)

        # getting tag and identifier for a specific object
        if tag_name == None:
            tag = tag_property_dict.keys()[0]
            identifier = tag_property_dict.values()[0]
        else:
            identifier = tag_property_dict[tag_name]
            tag = tag_name
    except:
        traceback.print_exc()
    return tag, identifier

def get_android_device_dict():
    """
    This function is used for getting device dictionary

    Function Owner : Nithya_V

    Date created : 20/05/2016

    @return device_id : (string) Device dictionary of the android device
    """
    device_dict = {}
    try:
        # running android adb command to retrieve device id
        result, error = util.runCommand(global_vars.android_deviceID_cmd)
        device_dict = {}
        if error == "":
            device_lines = result.split('\n')
            for line in device_lines:
                if not(line.__contains__('List of devices attached')) and line.__contains__('device'):
                    
                    device = line.split('  device')
                    deviced_id = device[0].strip()
                    if line.__contains__('model:'):
                        device_model = device[1].split('model:')[1].strip()
                    else:
                        device_model = None
                    device_dict[deviced_id] = device_model
            print "ADB device dict is %s" %   device_dict
        else:
            print "Cannot retrieve device dictionary"
    except:
        traceback.print_exc() 
        return ""     
    return device_dict

def get_android_device_id():
    """
    This function is used for getting device id

    Function Owner : Nithya_V

    Date created : 24/05/2016

    @return device_id : (string) Device id of the android device
    """
    #device_id = None
    try:
        # getting details of android devices connected through adb shell
        adb_device_dict = get_android_device_dict()

        if global_varsdevicetype == 'real':
            # checking for real device id with user input device name
            for adb_devID, adb_devName in adb_device_dict.iteritems():
                if not(adb_devName.__contains__('vbox')):
                    print "\n##=== Real device found with device Id %s ===##\n" % adb_devID
                    return adb_devID
        elif global_vars.devicetype == 'virtual':
            # get genny motion powered on devices
            gennymotion_device_dict = get_gennymotion_devices()

            print "\n######==== Device name for execution is %s ====######\n" % global_vars.device_name

            # checking for the emulator device id with user input device name
            for gm_deviceId, gm_deviceName in gennymotion_device_dict.iteritems():
                print "gm_device id & device name is %s %s" % ( str(gm_deviceName), gm_deviceId)
                print "global_vars.device name is ############ %s" % str(global_vars.device_name)   
                if str(gm_deviceName).strip() == str(global_vars.device_name).strip():
                    print "YES"
                    deviceId = gm_deviceId
                    for adb_devID, adb_devName in adb_device_dict.iteritems():
                        print "adb device id & device name is %s %s" % (adb_devID, adb_devName)
                        if adb_devID.split(':')[0] == deviceId :
                            print "\n##=== Emulator found with device Id %s ===##\n" % adb_devID
                            return adb_devID
                else:
                    print "NO"
        else:
            print "Device type not mentioned properly in config file ..."
    except:
        traceback.print_exc()
        return ""
    return ""


def get_android_version():
    """
    This function is used for getting device id

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return android_version : (string) android version of the device
    """
    android_version = ""
    try:
        if global_vars.android_device_id == None:
            global_vars.android_device_id = get_android_device_id()
        print "and version command is %s" % global_vars.android_version_cmd
        and_ver_cmd = str(global_vars.android_version_cmd).replace('device_id', str(global_vars.android_device_id))
        print "Android version command is %s" % and_ver_cmd

        # running android adb command to retrieve device version
        result, error = util.runCommand(and_ver_cmd)
        if error == "":
            android_version = str(result).strip()
        else:
            print "Cannot retrieve android version"
    except:
        traceback.print_exc()
        return None
    return android_version


def get_android_installed_packages():
    """
    This function is used for getting installed packages in a devices

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return installed_packages : (string) all the packages installed in device
    """
    installed_packages = ""
    try:
        if global_vars.android_device_id == None:
            global_varsandroid_device_id = get_android_device_id()
        print "device id is %s" % global_vars.android_device_id
        print "command for installed packages %s" % global_vars.and_get_installed_packs_cmd
        # changing device id runtime
        cmd_packages = global_vars.and_get_installed_packs_cmd.replace('device_id', str(global_vars.android_device_id))
        
        print "Command packages %s" % cmd_packages

        # running android adb command to retrieve installed packages
        result, error = util.runCommand(cmd_packages)
        if error == "":
            installed_packages = str(result).strip()
        else:
            print "Cannot retrieve installed packages"
    except:
        traceback.print_exc()
        return None
    return installed_packages


def uninstall_android_omm_app():
    """
    This function is used for uninstall OMM app

    Function Owner : Nithya_V

    Date created : 3/05/2016

    @return True/False : (string) status of exeuction
    """
    try:
        # running android adb command to un install omm package
        if get_android_installed_packages().__contains__(global_vars.app_package):
            # changing device id runtime
            uninstall_cmd = global_vars.android_uninstall_cmd.replace('device_id', global_vars.android_device_id)

            print "\n#### Executing command to uninstall OMM android app #### \n %s" % uninstall_cmd
            result, error = util.runCommand(uninstall_cmd)
            if error == "" and str(result).strip() == "Success":
                return True
            else:
                print "Cannot uninstall the package"
        else:
            print "Package is not installed"
            return True
    except:
        traceback.print_exc()
    return False

def uninstall_app(app_package):
    """
    This function is used for uninstall any app

    Function Owner : Nithya_V

    Date created : 3/05/2016

    @return True/False : (string) status of exeuction
    """
    try:
        # running android adb command to un install omm package
        if get_android_installed_packages().__contains__(app_package):
            
            # changing device id runtime
            uninstall_cmd = global_vars.android_app_uninstall_cmd.replace('device_id', global_vars.android_device_id) + app_package
            print "Uninstall command is %s" % uninstall_cmd
            
            print "\n#### Executing command to uninstall OMM android app #### \n %s" % uninstall_cmd 

            result, error = util.runCommand(uninstall_cmd)
            if error == "" and str(result).strip() == "Success":
                return True
            else:
                print "Cannot uninstall the package"
        else:
            print "Package is not installed"
            return True
    except:
        traceback.print_exc()   
    return False

def uninstall_ios_omm_app():
    """
    This function is used for uninstall IOS OMM app

    Function Owner : Nithya_V

    Date created : 17/05/2016

    @return True/False : (string) status of execution
    """
    try:
        uninstall_cmd = str(global_vars.ios_uninstall_cmd).replace('udid', global_vars.udid)
        print "\n#### Executing command to uninstall OMM IOS app #### \n %s" % uninstall_cmd
        result, error = util.runCommand(uninstall_cmd)
        if error == "" and str(result).__contains__('Complete'):
            return True
    except:
        traceback.print_exc()
    return False


def get_testcase_verification_dict():
    """
    This function is used for reading test data from test case input file

    Function Owner : Nithya_V

    Date created : 20/04/2016

    @return installed_packages : (string) all the packages installed in device
    """
    try:
        if (util.pathExists(global_vars.tc_input_file_path)):
            try:
                main_node_list, xml_dict = [], {}
                xmlobj = minidom.parse(global_vars.tc_input_file_path)
                main_node = xmlobj.getElementsByTagName('omm_input')
                main_node_childs = main_node[0].childNodes
                for node in main_node_childs:
                    if str(node.nodeName) != '#text':
                        main_node_list.append(str(node.nodeName))
                for each_main_node in main_node_list:
                    tc_node = xmlobj.getElementsByTagName(each_main_node)
                    nodes = tc_node[0].childNodes
                    ret_dict = {}
                    for node in nodes:
                        if (node.nodeType == node.ELEMENT_NODE):
                            try:
                                subnode = node.childNodes[0]
                                ret_dict[str(node.nodeName)] = str(subnode.nodeValue)
                            except:
                                ret_dict[str(node.nodeName)] = ""
                    xml_dict[each_main_node] = ret_dict
                return xml_dict
            except:
                traceback.print_exc()
                return traceback.format_exc()
        else:
            return {}
    except:
        traceback.print_exc()
    return {}


def get_ios_udid():
    """
    This function is used for getting udid in an ios device

    Function Owner : Nithya_V

    Date created : 13/05/2016

    @return udid : (string) UDID of the ios device
    """
    udid = ""
    try:
        # running android adb command to retrieve device id
        result, error = util.runCommand(global_vars.ios_udid_cmd, shell=True)
        print "Command is %s" % global_vars.ios_udid_cmd
        if error == "":
            udid = result.strip()
            print "UDID is %s" % udid
        else:
            print "Cannot retrieve udid"
    except:
        traceback.print_exc()
        return ""
    return udid

def get_gennymotion_devices():

    """
    This function is used for getting available gennymotion emulators
    with Status ON

    Function Owner : Nithya_V

    Date created : 24/05/2016

    @return devices : (dictionary) Dictionary of genny motion devices with its
                    id, status, type, name
    """
    gm_device_dict = {}
    
    try:
        # running android adb command to retrieve device id
        print "OS type is %s" % os_type
        if os_type == 'Windows':
            gennymotion_cmd = global_vars.gennymotion_cmd
        else:
            gennymotion_cmd = global_vars.mac_gennymotion_cmd
        
        result, error = util.runCommand(gennymotion_cmd, shell=True)
        print "result is %s" % result
        if error == "":
            lines = result.split('\n')
            for line in lines:
                if line.__contains__('|  virtual |'):
                    deviceline = line.split('|')
                    if deviceline[2].strip() == 'On':
                        gm_device_dict[deviceline[4].strip()] = deviceline[5].strip()
            print "Genny motion Device dictionary is %s" % gm_device_dict
        else:
            print "Cannot retrieve genny motion device details"
    except:
        traceback.print_exc() 
        return {}     
    return gm_device_dict
